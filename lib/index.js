// Generated by CoffeeScript 1.8.0
var curry, each, every, fastEach, fastEvery, fastFilter, fastMap, fastReduce, fastSome, filter, map, reduce, some, typeCheck, _baseSomeOrEvery;

curry = require("curry");

fastMap = require("fast.js/map");

fastEach = require("fast.js/forEach");

fastFilter = require("fast.js/filter");

fastReduce = require("fast.js/reduce");

fastEvery = require("fast.js/array/every");

fastSome = require("fast.js/array/some");

typeCheck = function(cb, obj) {
  var m;
  m = [];
  if (typeof cb !== "function") {
    m.push("Value " + cb + " is not a function.");
  }
  if (Object(obj) !== obj) {
    m.push("Value " + obj + " is not an object.");
  }
  if (m.length) {
    throw new TypeError(m.join("\n"));
  }
};

map = function(cb, obj) {
  var thisContext;
  typeCheck(cb, obj);
  if (arguments.length > 2) {
    thisContext = arguments[2];
  }
  if (thisContext) {
    return fastMap(obj, cb, thisContext);
  } else {
    return fastMap(obj, cb);
  }
};

each = function(cb, obj) {
  map(cb, obj);
  return void 0;
};

filter = function(cb, obj) {
  var thisContext;
  typeCheck(cb, obj);
  if (arguments.length > 2) {
    thisContext = arguments[2];
  }
  if (thisContext) {
    return fastFilter(obj, cb, thisContext);
  } else {
    return fastFilter(obj, cb);
  }
};

reduce = function(cb, initial, obj) {
  var thisContext;
  typeCheck(cb, obj);
  if (arguments.length > 3) {
    thisContext = arguments[3];
  }
  if (typeof initial === "function") {
    initial = initial();
  }
  if (thisContext) {
    return fastReduce(obj, cb, initial, thisContext);
  } else {
    return fastReduce(obj, cb, initial);
  }
};

_baseSomeOrEvery = function(which) {
  return function(cb, obj) {
    var fn, keys, thisContext;
    typeCheck(cb, obj);
    if (arguments.length > 2) {
      thisContext = arguments[2];
    }
    if (Array.isArray(obj)) {
      if (thisContext) {
        return which(obj, cb, thisContext);
      } else {
        return which(obj, cb);
      }
    }
    fn = function(key) {
      return cb(obj[key], key);
    };
    keys = Object.keys(obj);
    if (thisContext) {
      return which(keys, fn, thisContext);
    } else {
      return which(keys, fn);
    }
  };
};

some = _baseSomeOrEvery(fastSome);

every = _baseSomeOrEvery(fastEvery);

module.exports = {
  map: curry(map),
  each: curry(each),
  filter: curry(filter),
  reduce: curry(reduce),
  every: curry(every),
  some: curry(some)
};
