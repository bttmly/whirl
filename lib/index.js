// Generated by CoffeeScript 1.8.0
var curry, each, filter, map, reduce, typeCheck;

curry = require("curry");

typeCheck = function(cb, obj) {
  if (typeof cb !== "function") {
    throw new TypeError("Value " + cb + " is not a function.");
  }
  if (Object(obj) !== obj) {
    throw new TypeError("Value " + obj + " is not an object.");
  }
};

map = function(cb, obj) {
  var i, item, key, result, _i, _len, _ref;
  typeCheck(cb, obj);
  if (Array.isArray(obj)) {
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
        item = obj[i];
        _results.push(cb(item, i));
      }
      return _results;
    })();
  } else {
    result = {};
    _ref = Object.keys(obj);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      result[key] = cb(obj[key], key);
    }
    return result;
  }
};

each = function(cb, obj) {
  map(cb, obj);
  return void 0;
};

filter = function(cb, obj) {
  var i, item, key, result, _i, _len, _ref;
  typeCheck(cb, obj);
  if (Array.isArray(obj)) {
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
        item = obj[i];
        if (cb(item, i)) {
          _results.push(item);
        }
      }
      return _results;
    })();
  } else {
    result = {};
    _ref = Object.keys(obj);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (cb(key, obj[key])) {
        result[key] = obj[key];
      }
    }
    return result;
  }
};

reduce = function(cb, result, obj) {
  var arr, key, _i, _len;
  typeCheck(cb, obj);
  arr = Array.isArray(obj) ? obj : Object.keys(obj);
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    key = arr[_i];
    result = cb(result, obj[key], key);
  }
  return result;
};

module.exports = {
  map: curry(map),
  each: curry(each),
  filter: curry(filter),
  reduce: curry(reduce)
};
